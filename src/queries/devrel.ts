/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import gql from 'graphql-tag'
import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
export type GetDevrelsQueryVariables = Types.Exact<{
  type: Types.Scalars['String']
}>

export type GetDevrelsQuery = { __typename?: 'Query' } & {
  devrels: Array<
    { __typename?: 'Devrel' } & Pick<
      Types.Devrel,
      'id' | 'type' | 'title' | 'link' | 'resource' | 'dateStart' | 'dateEnd' | 'isCompleted'
    > & {
        employee?: Types.Maybe<
          { __typename?: 'Employee' } & Pick<Types.Employee, 'id' | 'email' | 'name'>
        >
      }
  >
}

export type CreateDevrelMutationVariables = Types.Exact<{
  input: Types.CreateDevrelInput
}>

export type CreateDevrelMutation = { __typename?: 'Mutation' } & {
  createDevrel?: Types.Maybe<{ __typename?: 'Devrel' } & Pick<Types.Devrel, 'id'>>
}

export type UpdateDevrelMutationVariables = Types.Exact<{
  input: Types.UpdateDevrelInput
}>

export type UpdateDevrelMutation = { __typename?: 'Mutation' } & {
  updateDevrel?: Types.Maybe<{ __typename?: 'Devrel' } & Pick<Types.Devrel, 'id'>>
}

export type DeleteDevrelMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']
}>

export type DeleteDevrelMutation = { __typename?: 'Mutation' } & {
  deleteDevrel?: Types.Maybe<{ __typename?: 'Devrel' } & Pick<Types.Devrel, 'id'>>
}

export type ProposeDevrelEventMutationVariables = Types.Exact<{
  input: Types.ProposeDevrelEventInput
}>

export type ProposeDevrelEventMutation = { __typename?: 'Mutation' } & Pick<
  Types.Mutation,
  'proposeDevrelEvent'
>

export type ParticipateDevrelEventMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']
}>

export type ParticipateDevrelEventMutation = { __typename?: 'Mutation' } & Pick<
  Types.Mutation,
  'participateDevrelEvent'
>

export const GetDevrelsDocument = gql`
  query getDevrels($type: String!) {
    devrels(type: $type) {
      id
      type
      title
      link
      resource
      dateStart
      dateEnd
      employee {
        id
        email
        name
      }
      isCompleted
    }
  }
`

/**
 * __useGetDevrelsQuery__
 *
 * To run a query within a React component, call `useGetDevrelsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDevrelsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDevrelsQuery({
 *   variables: {
 *      type: // value for 'type'
 *   },
 * });
 */
export function useGetDevrelsQuery(
  baseOptions: ApolloReactHooks.QueryHookOptions<GetDevrelsQuery, GetDevrelsQueryVariables>,
) {
  return ApolloReactHooks.useQuery<GetDevrelsQuery, GetDevrelsQueryVariables>(
    GetDevrelsDocument,
    baseOptions,
  )
}
export function useGetDevrelsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDevrelsQuery, GetDevrelsQueryVariables>,
) {
  return ApolloReactHooks.useLazyQuery<GetDevrelsQuery, GetDevrelsQueryVariables>(
    GetDevrelsDocument,
    baseOptions,
  )
}
export type GetDevrelsQueryHookResult = ReturnType<typeof useGetDevrelsQuery>
export type GetDevrelsLazyQueryHookResult = ReturnType<typeof useGetDevrelsLazyQuery>
export type GetDevrelsQueryResult = ApolloReactCommon.QueryResult<
  GetDevrelsQuery,
  GetDevrelsQueryVariables
>
export const CreateDevrelDocument = gql`
  mutation createDevrel($input: CreateDevrelInput!) {
    createDevrel(input: $input) {
      id
    }
  }
`
export type CreateDevrelMutationFn = ApolloReactCommon.MutationFunction<
  CreateDevrelMutation,
  CreateDevrelMutationVariables
>

/**
 * __useCreateDevrelMutation__
 *
 * To run a mutation, you first call `useCreateDevrelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDevrelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDevrelMutation, { data, loading, error }] = useCreateDevrelMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateDevrelMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    CreateDevrelMutation,
    CreateDevrelMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<CreateDevrelMutation, CreateDevrelMutationVariables>(
    CreateDevrelDocument,
    baseOptions,
  )
}
export type CreateDevrelMutationHookResult = ReturnType<typeof useCreateDevrelMutation>
export type CreateDevrelMutationResult = ApolloReactCommon.MutationResult<CreateDevrelMutation>
export type CreateDevrelMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateDevrelMutation,
  CreateDevrelMutationVariables
>
export const UpdateDevrelDocument = gql`
  mutation updateDevrel($input: UpdateDevrelInput!) {
    updateDevrel(input: $input) {
      id
    }
  }
`
export type UpdateDevrelMutationFn = ApolloReactCommon.MutationFunction<
  UpdateDevrelMutation,
  UpdateDevrelMutationVariables
>

/**
 * __useUpdateDevrelMutation__
 *
 * To run a mutation, you first call `useUpdateDevrelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateDevrelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateDevrelMutation, { data, loading, error }] = useUpdateDevrelMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateDevrelMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateDevrelMutation,
    UpdateDevrelMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<UpdateDevrelMutation, UpdateDevrelMutationVariables>(
    UpdateDevrelDocument,
    baseOptions,
  )
}
export type UpdateDevrelMutationHookResult = ReturnType<typeof useUpdateDevrelMutation>
export type UpdateDevrelMutationResult = ApolloReactCommon.MutationResult<UpdateDevrelMutation>
export type UpdateDevrelMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateDevrelMutation,
  UpdateDevrelMutationVariables
>
export const DeleteDevrelDocument = gql`
  mutation deleteDevrel($id: ID!) {
    deleteDevrel(id: $id) {
      id
    }
  }
`
export type DeleteDevrelMutationFn = ApolloReactCommon.MutationFunction<
  DeleteDevrelMutation,
  DeleteDevrelMutationVariables
>

/**
 * __useDeleteDevrelMutation__
 *
 * To run a mutation, you first call `useDeleteDevrelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteDevrelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteDevrelMutation, { data, loading, error }] = useDeleteDevrelMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteDevrelMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    DeleteDevrelMutation,
    DeleteDevrelMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<DeleteDevrelMutation, DeleteDevrelMutationVariables>(
    DeleteDevrelDocument,
    baseOptions,
  )
}
export type DeleteDevrelMutationHookResult = ReturnType<typeof useDeleteDevrelMutation>
export type DeleteDevrelMutationResult = ApolloReactCommon.MutationResult<DeleteDevrelMutation>
export type DeleteDevrelMutationOptions = ApolloReactCommon.BaseMutationOptions<
  DeleteDevrelMutation,
  DeleteDevrelMutationVariables
>
export const ProposeDevrelEventDocument = gql`
  mutation proposeDevrelEvent($input: ProposeDevrelEventInput!) {
    proposeDevrelEvent(input: $input)
  }
`
export type ProposeDevrelEventMutationFn = ApolloReactCommon.MutationFunction<
  ProposeDevrelEventMutation,
  ProposeDevrelEventMutationVariables
>

/**
 * __useProposeDevrelEventMutation__
 *
 * To run a mutation, you first call `useProposeDevrelEventMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProposeDevrelEventMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [proposeDevrelEventMutation, { data, loading, error }] = useProposeDevrelEventMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useProposeDevrelEventMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    ProposeDevrelEventMutation,
    ProposeDevrelEventMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<
    ProposeDevrelEventMutation,
    ProposeDevrelEventMutationVariables
  >(ProposeDevrelEventDocument, baseOptions)
}
export type ProposeDevrelEventMutationHookResult = ReturnType<typeof useProposeDevrelEventMutation>
export type ProposeDevrelEventMutationResult = ApolloReactCommon.MutationResult<
  ProposeDevrelEventMutation
>
export type ProposeDevrelEventMutationOptions = ApolloReactCommon.BaseMutationOptions<
  ProposeDevrelEventMutation,
  ProposeDevrelEventMutationVariables
>
export const ParticipateDevrelEventDocument = gql`
  mutation participateDevrelEvent($id: ID!) {
    participateDevrelEvent(id: $id)
  }
`
export type ParticipateDevrelEventMutationFn = ApolloReactCommon.MutationFunction<
  ParticipateDevrelEventMutation,
  ParticipateDevrelEventMutationVariables
>

/**
 * __useParticipateDevrelEventMutation__
 *
 * To run a mutation, you first call `useParticipateDevrelEventMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useParticipateDevrelEventMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [participateDevrelEventMutation, { data, loading, error }] = useParticipateDevrelEventMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useParticipateDevrelEventMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    ParticipateDevrelEventMutation,
    ParticipateDevrelEventMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<
    ParticipateDevrelEventMutation,
    ParticipateDevrelEventMutationVariables
  >(ParticipateDevrelEventDocument, baseOptions)
}
export type ParticipateDevrelEventMutationHookResult = ReturnType<
  typeof useParticipateDevrelEventMutation
>
export type ParticipateDevrelEventMutationResult = ApolloReactCommon.MutationResult<
  ParticipateDevrelEventMutation
>
export type ParticipateDevrelEventMutationOptions = ApolloReactCommon.BaseMutationOptions<
  ParticipateDevrelEventMutation,
  ParticipateDevrelEventMutationVariables
>
