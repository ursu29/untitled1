/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import gql from 'graphql-tag'
import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
export type GetNotificationsQueryVariables = Types.Exact<{ [key: string]: never }>

export type GetNotificationsQuery = { __typename?: 'Query' } & {
  notifications: Array<
    { __typename?: 'Notification' } & Pick<Types.Notification, 'id' | 'link' | 'title' | 'type'>
  >
}

export type UnsubscribeNotificationMutationVariables = Types.Exact<{
  ids: Array<Types.Scalars['ID']> | Types.Scalars['ID']
}>

export type UnsubscribeNotificationMutation = { __typename?: 'Mutation' } & Pick<
  Types.Mutation,
  'unsubscribeNotification'
>

export const GetNotificationsDocument = gql`
  query getNotifications {
    notifications {
      id
      link
      title
      type
    }
  }
`

/**
 * __useGetNotificationsQuery__
 *
 * To run a query within a React component, call `useGetNotificationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetNotificationsQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<
    GetNotificationsQuery,
    GetNotificationsQueryVariables
  >,
) {
  return ApolloReactHooks.useQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(
    GetNotificationsDocument,
    baseOptions,
  )
}
export function useGetNotificationsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<
    GetNotificationsQuery,
    GetNotificationsQueryVariables
  >,
) {
  return ApolloReactHooks.useLazyQuery<GetNotificationsQuery, GetNotificationsQueryVariables>(
    GetNotificationsDocument,
    baseOptions,
  )
}
export type GetNotificationsQueryHookResult = ReturnType<typeof useGetNotificationsQuery>
export type GetNotificationsLazyQueryHookResult = ReturnType<typeof useGetNotificationsLazyQuery>
export type GetNotificationsQueryResult = ApolloReactCommon.QueryResult<
  GetNotificationsQuery,
  GetNotificationsQueryVariables
>
export const UnsubscribeNotificationDocument = gql`
  mutation unsubscribeNotification($ids: [ID!]!) {
    unsubscribeNotification(ids: $ids)
  }
`
export type UnsubscribeNotificationMutationFn = ApolloReactCommon.MutationFunction<
  UnsubscribeNotificationMutation,
  UnsubscribeNotificationMutationVariables
>

/**
 * __useUnsubscribeNotificationMutation__
 *
 * To run a mutation, you first call `useUnsubscribeNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnsubscribeNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unsubscribeNotificationMutation, { data, loading, error }] = useUnsubscribeNotificationMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useUnsubscribeNotificationMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UnsubscribeNotificationMutation,
    UnsubscribeNotificationMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<
    UnsubscribeNotificationMutation,
    UnsubscribeNotificationMutationVariables
  >(UnsubscribeNotificationDocument, baseOptions)
}
export type UnsubscribeNotificationMutationHookResult = ReturnType<
  typeof useUnsubscribeNotificationMutation
>
export type UnsubscribeNotificationMutationResult = ApolloReactCommon.MutationResult<
  UnsubscribeNotificationMutation
>
export type UnsubscribeNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UnsubscribeNotificationMutation,
  UnsubscribeNotificationMutationVariables
>
