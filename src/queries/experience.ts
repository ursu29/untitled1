/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import gql from 'graphql-tag'
import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
export type CreateExperienceMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.CreateExperienceInput>
}>

export type CreateExperienceMutation = { __typename?: 'Mutation' } & {
  createExperience?: Types.Maybe<{ __typename?: 'Experience' } & Pick<Types.Experience, 'id'>>
}

export type UpdateExperienceMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.UpdateExperienceInput>
}>

export type UpdateExperienceMutation = { __typename?: 'Mutation' } & {
  updateExperience?: Types.Maybe<{ __typename?: 'Experience' } & Pick<Types.Experience, 'id'>>
}

export type DeleteExperienceMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.DeleteExperienceInput>
}>

export type DeleteExperienceMutation = { __typename?: 'Mutation' } & {
  deleteExperience?: Types.Maybe<{ __typename?: 'Experience' } & Pick<Types.Experience, 'id'>>
}

export const CreateExperienceDocument = gql`
  mutation createExperience($input: CreateExperienceInput) {
    createExperience(input: $input) {
      id
    }
  }
`
export type CreateExperienceMutationFn = ApolloReactCommon.MutationFunction<
  CreateExperienceMutation,
  CreateExperienceMutationVariables
>

/**
 * __useCreateExperienceMutation__
 *
 * To run a mutation, you first call `useCreateExperienceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateExperienceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createExperienceMutation, { data, loading, error }] = useCreateExperienceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateExperienceMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    CreateExperienceMutation,
    CreateExperienceMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<CreateExperienceMutation, CreateExperienceMutationVariables>(
    CreateExperienceDocument,
    baseOptions,
  )
}
export type CreateExperienceMutationHookResult = ReturnType<typeof useCreateExperienceMutation>
export type CreateExperienceMutationResult = ApolloReactCommon.MutationResult<
  CreateExperienceMutation
>
export type CreateExperienceMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateExperienceMutation,
  CreateExperienceMutationVariables
>
export const UpdateExperienceDocument = gql`
  mutation updateExperience($input: UpdateExperienceInput) {
    updateExperience(input: $input) {
      id
    }
  }
`
export type UpdateExperienceMutationFn = ApolloReactCommon.MutationFunction<
  UpdateExperienceMutation,
  UpdateExperienceMutationVariables
>

/**
 * __useUpdateExperienceMutation__
 *
 * To run a mutation, you first call `useUpdateExperienceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateExperienceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateExperienceMutation, { data, loading, error }] = useUpdateExperienceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateExperienceMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateExperienceMutation,
    UpdateExperienceMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<UpdateExperienceMutation, UpdateExperienceMutationVariables>(
    UpdateExperienceDocument,
    baseOptions,
  )
}
export type UpdateExperienceMutationHookResult = ReturnType<typeof useUpdateExperienceMutation>
export type UpdateExperienceMutationResult = ApolloReactCommon.MutationResult<
  UpdateExperienceMutation
>
export type UpdateExperienceMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateExperienceMutation,
  UpdateExperienceMutationVariables
>
export const DeleteExperienceDocument = gql`
  mutation deleteExperience($input: DeleteExperienceInput) {
    deleteExperience(input: $input) {
      id
    }
  }
`
export type DeleteExperienceMutationFn = ApolloReactCommon.MutationFunction<
  DeleteExperienceMutation,
  DeleteExperienceMutationVariables
>

/**
 * __useDeleteExperienceMutation__
 *
 * To run a mutation, you first call `useDeleteExperienceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteExperienceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteExperienceMutation, { data, loading, error }] = useDeleteExperienceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteExperienceMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    DeleteExperienceMutation,
    DeleteExperienceMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<DeleteExperienceMutation, DeleteExperienceMutationVariables>(
    DeleteExperienceDocument,
    baseOptions,
  )
}
export type DeleteExperienceMutationHookResult = ReturnType<typeof useDeleteExperienceMutation>
export type DeleteExperienceMutationResult = ApolloReactCommon.MutationResult<
  DeleteExperienceMutation
>
export type DeleteExperienceMutationOptions = ApolloReactCommon.BaseMutationOptions<
  DeleteExperienceMutation,
  DeleteExperienceMutationVariables
>
