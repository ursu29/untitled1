/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
const defaultOptions = {}
export type GetEmployeeProjectsQueryVariables = Types.Exact<{
  id: Types.Scalars['ID']
}>

export type GetEmployeeProjectsQuery = { __typename?: 'Query' } & {
  employee?: Types.Maybe<
    { __typename?: 'Employee' } & Pick<Types.Employee, 'id'> & {
        projects?: Types.Maybe<
          Array<{ __typename?: 'Project' } & Pick<Types.Project, 'id' | 'name' | 'code'>>
        >
        employeeProjects?: Types.Maybe<
          Array<
            { __typename?: 'EmployeeProject' } & Pick<
              Types.EmployeeProject,
              'id' | 'capacity' | 'isExtraCapacity'
            > & { project?: Types.Maybe<{ __typename?: 'Project' } & Pick<Types.Project, 'id'>> }
          >
        >
      }
  >
}

export const GetEmployeeProjectsDocument = gql`
  query getEmployeeProjects($id: ID!) {
    employee(id: $id) {
      id
      projects {
        id
        name
        code
      }
      employeeProjects {
        id
        capacity
        isExtraCapacity
        project {
          id
        }
      }
    }
  }
`

/**
 * __useGetEmployeeProjectsQuery__
 *
 * To run a query within a React component, call `useGetEmployeeProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEmployeeProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEmployeeProjectsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetEmployeeProjectsQuery(
  baseOptions: Apollo.QueryHookOptions<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>(
    GetEmployeeProjectsDocument,
    options,
  )
}
export function useGetEmployeeProjectsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetEmployeeProjectsQuery,
    GetEmployeeProjectsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetEmployeeProjectsQuery, GetEmployeeProjectsQueryVariables>(
    GetEmployeeProjectsDocument,
    options,
  )
}
export type GetEmployeeProjectsQueryHookResult = ReturnType<typeof useGetEmployeeProjectsQuery>
export type GetEmployeeProjectsLazyQueryHookResult = ReturnType<
  typeof useGetEmployeeProjectsLazyQuery
>
export type GetEmployeeProjectsQueryResult = Apollo.QueryResult<
  GetEmployeeProjectsQuery,
  GetEmployeeProjectsQueryVariables
>
