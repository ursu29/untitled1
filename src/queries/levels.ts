/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
const defaultOptions = {}
export type GetLevelsQueryVariables = Types.Exact<{ [key: string]: never }>

export type GetLevelsQuery = { __typename?: 'Query' } & Pick<Types.Query, 'levels'>

export const GetLevelsDocument = gql`
  query getLevels {
    levels
  }
`

/**
 * __useGetLevelsQuery__
 *
 * To run a query within a React component, call `useGetLevelsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLevelsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLevelsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLevelsQuery(
  baseOptions?: Apollo.QueryHookOptions<GetLevelsQuery, GetLevelsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetLevelsQuery, GetLevelsQueryVariables>(GetLevelsDocument, options)
}
export function useGetLevelsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GetLevelsQuery, GetLevelsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetLevelsQuery, GetLevelsQueryVariables>(GetLevelsDocument, options)
}
export type GetLevelsQueryHookResult = ReturnType<typeof useGetLevelsQuery>
export type GetLevelsLazyQueryHookResult = ReturnType<typeof useGetLevelsLazyQuery>
export type GetLevelsQueryResult = Apollo.QueryResult<GetLevelsQuery, GetLevelsQueryVariables>
