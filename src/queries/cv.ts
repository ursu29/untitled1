import * as ApolloReactHooks, { gql } from "@apollo/client";
/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import * as ApolloReactCommon from '@apollo/react-common'
export type CvFragment = { __typename?: 'CurriculumVitae' } & Pick<
  Types.CurriculumVitae,
  'id' | 'summary' | 'languages'
> & {
    vitaes?: Types.Maybe<
      Array<
        { __typename?: 'Vitae' } & Pick<
          Types.Vitae,
          | 'id'
          | 'company'
          | 'dateStart'
          | 'dateEnd'
          | 'project'
          | 'position'
          | 'responsibilities'
          | 'level'
        >
      >
    >
    certificates?: Types.Maybe<
      Array<
        { __typename?: 'Certificate' } & Pick<
          Types.Certificate,
          'id' | 'name' | 'date' | 'expirationDate' | 'link'
        >
      >
    >
    education?: Types.Maybe<
      Array<
        { __typename?: 'Education' } & Pick<
          Types.Education,
          'id' | 'name' | 'speciality' | 'degree' | 'dateStart' | 'dateEnd'
        >
      >
    >
  }

export type GetCvQueryVariables = Types.Exact<{
  email: Types.Scalars['String']
}>

export type GetCvQuery = { __typename?: 'Query' } & {
  employeeByEmail?: Types.Maybe<
    { __typename?: 'Employee' } & Pick<Types.Employee, 'id'> & {
        curriculumVitae?: Types.Maybe<{ __typename?: 'CurriculumVitae' } & CvFragment>
      }
  >
}

export type UpdateCvMutationVariables = Types.Exact<{
  input: Types.UpdateCurriculumVitaeInput
}>

export type UpdateCvMutation = { __typename?: 'Mutation' } & {
  updateCurriculumVitae?: Types.Maybe<{ __typename?: 'CurriculumVitae' } & CvFragment>
}

export const CvFragmentDoc = gql`
  fragment CV on CurriculumVitae {
    id
    summary
    languages
    vitaes {
      id
      company
      dateStart
      dateEnd
      project
      position
      responsibilities
      level
    }
    certificates {
      id
      name
      date
      expirationDate
      link
    }
    education {
      id
      name
      speciality
      degree
      dateStart
      dateEnd
    }
  }
`
export const GetCvDocument = gql`
  query getCV($email: String!) {
    employeeByEmail(email: $email) {
      id
      curriculumVitae {
        ...CV
      }
    }
  }
  ${CvFragmentDoc}
`

/**
 * __useGetCvQuery__
 *
 * To run a query within a React component, call `useGetCvQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCvQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCvQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useGetCvQuery(
  baseOptions: ApolloReactHooks.QueryHookOptions<GetCvQuery, GetCvQueryVariables>,
) {
  return ApolloReactHooks.useQuery<GetCvQuery, GetCvQueryVariables>(GetCvDocument, baseOptions)
}
export function useGetCvLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCvQuery, GetCvQueryVariables>,
) {
  return ApolloReactHooks.useLazyQuery<GetCvQuery, GetCvQueryVariables>(GetCvDocument, baseOptions)
}
export type GetCvQueryHookResult = ReturnType<typeof useGetCvQuery>
export type GetCvLazyQueryHookResult = ReturnType<typeof useGetCvLazyQuery>
export type GetCvQueryResult = ApolloReactCommon.QueryResult<GetCvQuery, GetCvQueryVariables>
export const UpdateCvDocument = gql`
  mutation updateCV($input: UpdateCurriculumVitaeInput!) {
    updateCurriculumVitae(input: $input) {
      ...CV
    }
  }
  ${CvFragmentDoc}
`
export type UpdateCvMutationFn = ApolloReactCommon.MutationFunction<
  UpdateCvMutation,
  UpdateCvMutationVariables
>

/**
 * __useUpdateCvMutation__
 *
 * To run a mutation, you first call `useUpdateCvMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCvMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCvMutation, { data, loading, error }] = useUpdateCvMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCvMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCvMutation, UpdateCvMutationVariables>,
) {
  return ApolloReactHooks.useMutation<UpdateCvMutation, UpdateCvMutationVariables>(
    UpdateCvDocument,
    baseOptions,
  )
}
export type UpdateCvMutationHookResult = ReturnType<typeof useUpdateCvMutation>
export type UpdateCvMutationResult = ApolloReactCommon.MutationResult<UpdateCvMutation>
export type UpdateCvMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateCvMutation,
  UpdateCvMutationVariables
>
