/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import gql from 'graphql-tag'
import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
export type GetSkillsQueryVariables = Types.Exact<{
  input?: Types.Maybe<Types.SkillsInput>
}>

export type GetSkillsQuery = { __typename?: 'Query' } & {
  skills?: Types.Maybe<
    Array<
      { __typename?: 'Skill' } & Pick<
        Types.Skill,
        'id' | 'name' | 'description' | 'isMatrixOnly'
      > & { parent?: Types.Maybe<{ __typename?: 'Skill' } & Pick<Types.Skill, 'id'>> }
    >
  >
}

export type GetSkillsDetailedQueryVariables = Types.Exact<{
  input?: Types.Maybe<Types.SkillsInput>
}>

export type GetSkillsDetailedQuery = { __typename?: 'Query' } & {
  skills?: Types.Maybe<
    Array<
      { __typename?: 'Skill' } & Pick<
        Types.Skill,
        'id' | 'name' | 'description' | 'isMatrixOnly'
      > & {
          projects?: Types.Maybe<
            Array<{ __typename?: 'Project' } & Pick<Types.Project, 'id' | 'name' | 'code'>>
          >
          parent?: Types.Maybe<{ __typename?: 'Skill' } & Pick<Types.Skill, 'id' | 'name'>>
          addedBy?: Types.Maybe<
            { __typename?: 'Employee' } & Pick<Types.Employee, 'id' | 'name' | 'email'>
          >
        }
    >
  >
}

export type GetSkillProjectsQueryVariables = Types.Exact<{
  input?: Types.Maybe<Types.SkillsInput>
}>

export type GetSkillProjectsQuery = { __typename?: 'Query' } & {
  skills?: Types.Maybe<
    Array<
      { __typename?: 'Skill' } & Pick<Types.Skill, 'id' | 'name'> & {
          projects?: Types.Maybe<
            Array<{ __typename?: 'Project' } & Pick<Types.Project, 'id' | 'name' | 'code'>>
          >
        }
    >
  >
}

export type GetSkillExperiencesQueryVariables = Types.Exact<{
  input?: Types.Maybe<Types.SkillsInput>
}>

export type GetSkillExperiencesQuery = { __typename?: 'Query' } & {
  skills?: Types.Maybe<
    Array<
      { __typename?: 'Skill' } & Pick<Types.Skill, 'id' | 'name'> & {
          experiences?: Types.Maybe<
            Array<
              { __typename?: 'Experience' } & Pick<Types.Experience, 'id' | 'level'> & {
                  employee?: Types.Maybe<
                    { __typename?: 'Employee' } & Pick<Types.Employee, 'id' | 'name' | 'email'>
                  >
                }
            >
          >
        }
    >
  >
}

export type CreateSkillMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.CreateSkillInput>
}>

export type CreateSkillMutation = { __typename?: 'Mutation' } & {
  createSkill?: Types.Maybe<{ __typename?: 'Skill' } & Pick<Types.Skill, 'id'>>
}

export type UpdateSkillMutationVariables = Types.Exact<{
  input?: Types.Maybe<Types.UpdateSkillInput>
}>

export type UpdateSkillMutation = { __typename?: 'Mutation' } & {
  updateSkill?: Types.Maybe<{ __typename?: 'Skill' } & Pick<Types.Skill, 'id'>>
}

export const GetSkillsDocument = gql`
  query getSkills($input: SkillsInput) {
    skills(input: $input) {
      id
      name
      description
      parent {
        id
      }
      isMatrixOnly
    }
  }
`

/**
 * __useGetSkillsQuery__
 *
 * To run a query within a React component, call `useGetSkillsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSkillsQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<GetSkillsQuery, GetSkillsQueryVariables>,
) {
  return ApolloReactHooks.useQuery<GetSkillsQuery, GetSkillsQueryVariables>(
    GetSkillsDocument,
    baseOptions,
  )
}
export function useGetSkillsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSkillsQuery, GetSkillsQueryVariables>,
) {
  return ApolloReactHooks.useLazyQuery<GetSkillsQuery, GetSkillsQueryVariables>(
    GetSkillsDocument,
    baseOptions,
  )
}
export type GetSkillsQueryHookResult = ReturnType<typeof useGetSkillsQuery>
export type GetSkillsLazyQueryHookResult = ReturnType<typeof useGetSkillsLazyQuery>
export type GetSkillsQueryResult = ApolloReactCommon.QueryResult<
  GetSkillsQuery,
  GetSkillsQueryVariables
>
export const GetSkillsDetailedDocument = gql`
  query getSkillsDetailed($input: SkillsInput) {
    skills(input: $input) {
      id
      name
      description
      projects {
        id
        name
        code
      }
      parent {
        id
        name
      }
      addedBy {
        id
        name
        email
      }
      isMatrixOnly
    }
  }
`

/**
 * __useGetSkillsDetailedQuery__
 *
 * To run a query within a React component, call `useGetSkillsDetailedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillsDetailedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillsDetailedQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSkillsDetailedQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<
    GetSkillsDetailedQuery,
    GetSkillsDetailedQueryVariables
  >,
) {
  return ApolloReactHooks.useQuery<GetSkillsDetailedQuery, GetSkillsDetailedQueryVariables>(
    GetSkillsDetailedDocument,
    baseOptions,
  )
}
export function useGetSkillsDetailedLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<
    GetSkillsDetailedQuery,
    GetSkillsDetailedQueryVariables
  >,
) {
  return ApolloReactHooks.useLazyQuery<GetSkillsDetailedQuery, GetSkillsDetailedQueryVariables>(
    GetSkillsDetailedDocument,
    baseOptions,
  )
}
export type GetSkillsDetailedQueryHookResult = ReturnType<typeof useGetSkillsDetailedQuery>
export type GetSkillsDetailedLazyQueryHookResult = ReturnType<typeof useGetSkillsDetailedLazyQuery>
export type GetSkillsDetailedQueryResult = ApolloReactCommon.QueryResult<
  GetSkillsDetailedQuery,
  GetSkillsDetailedQueryVariables
>
export const GetSkillProjectsDocument = gql`
  query getSkillProjects($input: SkillsInput) {
    skills(input: $input) {
      id
      name
      projects {
        id
        name
        code
      }
    }
  }
`

/**
 * __useGetSkillProjectsQuery__
 *
 * To run a query within a React component, call `useGetSkillProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillProjectsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSkillProjectsQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<
    GetSkillProjectsQuery,
    GetSkillProjectsQueryVariables
  >,
) {
  return ApolloReactHooks.useQuery<GetSkillProjectsQuery, GetSkillProjectsQueryVariables>(
    GetSkillProjectsDocument,
    baseOptions,
  )
}
export function useGetSkillProjectsLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<
    GetSkillProjectsQuery,
    GetSkillProjectsQueryVariables
  >,
) {
  return ApolloReactHooks.useLazyQuery<GetSkillProjectsQuery, GetSkillProjectsQueryVariables>(
    GetSkillProjectsDocument,
    baseOptions,
  )
}
export type GetSkillProjectsQueryHookResult = ReturnType<typeof useGetSkillProjectsQuery>
export type GetSkillProjectsLazyQueryHookResult = ReturnType<typeof useGetSkillProjectsLazyQuery>
export type GetSkillProjectsQueryResult = ApolloReactCommon.QueryResult<
  GetSkillProjectsQuery,
  GetSkillProjectsQueryVariables
>
export const GetSkillExperiencesDocument = gql`
  query getSkillExperiences($input: SkillsInput) {
    skills(input: $input) {
      id
      name
      experiences {
        id
        level
        employee {
          id
          name
          email
        }
      }
    }
  }
`

/**
 * __useGetSkillExperiencesQuery__
 *
 * To run a query within a React component, call `useGetSkillExperiencesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSkillExperiencesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSkillExperiencesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSkillExperiencesQuery(
  baseOptions?: ApolloReactHooks.QueryHookOptions<
    GetSkillExperiencesQuery,
    GetSkillExperiencesQueryVariables
  >,
) {
  return ApolloReactHooks.useQuery<GetSkillExperiencesQuery, GetSkillExperiencesQueryVariables>(
    GetSkillExperiencesDocument,
    baseOptions,
  )
}
export function useGetSkillExperiencesLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<
    GetSkillExperiencesQuery,
    GetSkillExperiencesQueryVariables
  >,
) {
  return ApolloReactHooks.useLazyQuery<GetSkillExperiencesQuery, GetSkillExperiencesQueryVariables>(
    GetSkillExperiencesDocument,
    baseOptions,
  )
}
export type GetSkillExperiencesQueryHookResult = ReturnType<typeof useGetSkillExperiencesQuery>
export type GetSkillExperiencesLazyQueryHookResult = ReturnType<
  typeof useGetSkillExperiencesLazyQuery
>
export type GetSkillExperiencesQueryResult = ApolloReactCommon.QueryResult<
  GetSkillExperiencesQuery,
  GetSkillExperiencesQueryVariables
>
export const CreateSkillDocument = gql`
  mutation createSkill($input: CreateSkillInput) {
    createSkill(input: $input) {
      id
    }
  }
`
export type CreateSkillMutationFn = ApolloReactCommon.MutationFunction<
  CreateSkillMutation,
  CreateSkillMutationVariables
>

/**
 * __useCreateSkillMutation__
 *
 * To run a mutation, you first call `useCreateSkillMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSkillMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSkillMutation, { data, loading, error }] = useCreateSkillMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSkillMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    CreateSkillMutation,
    CreateSkillMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<CreateSkillMutation, CreateSkillMutationVariables>(
    CreateSkillDocument,
    baseOptions,
  )
}
export type CreateSkillMutationHookResult = ReturnType<typeof useCreateSkillMutation>
export type CreateSkillMutationResult = ApolloReactCommon.MutationResult<CreateSkillMutation>
export type CreateSkillMutationOptions = ApolloReactCommon.BaseMutationOptions<
  CreateSkillMutation,
  CreateSkillMutationVariables
>
export const UpdateSkillDocument = gql`
  mutation updateSkill($input: UpdateSkillInput) {
    updateSkill(input: $input) {
      id
    }
  }
`
export type UpdateSkillMutationFn = ApolloReactCommon.MutationFunction<
  UpdateSkillMutation,
  UpdateSkillMutationVariables
>

/**
 * __useUpdateSkillMutation__
 *
 * To run a mutation, you first call `useUpdateSkillMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSkillMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSkillMutation, { data, loading, error }] = useUpdateSkillMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSkillMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateSkillMutation,
    UpdateSkillMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<UpdateSkillMutation, UpdateSkillMutationVariables>(
    UpdateSkillDocument,
    baseOptions,
  )
}
export type UpdateSkillMutationHookResult = ReturnType<typeof useUpdateSkillMutation>
export type UpdateSkillMutationResult = ApolloReactCommon.MutationResult<UpdateSkillMutation>
export type UpdateSkillMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateSkillMutation,
  UpdateSkillMutationVariables
>
