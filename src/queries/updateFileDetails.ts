/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
const defaultOptions = {}
export type FileDetailsFragmentFragment = { __typename?: 'SharedFile' } & Pick<
  Types.SharedFile,
  'id'
> & { skills?: Types.Maybe<Array<{ __typename?: 'Skill' } & Pick<Types.Skill, 'id' | 'name'>>> }

export type UpdateFileDetailsMutationVariables = Types.Exact<{
  input: Types.UpdateSharedFileInput
}>

export type UpdateFileDetailsMutation = { __typename?: 'Mutation' } & {
  updateSharedFile?: Types.Maybe<{ __typename?: 'SharedFile' } & FileDetailsFragmentFragment>
}

export const FileDetailsFragmentFragmentDoc = gql`
  fragment FileDetailsFragment on SharedFile {
    id
    skills {
      id
      name
    }
  }
`
export const UpdateFileDetailsDocument = gql`
  mutation updateFileDetails($input: UpdateSharedFileInput!) {
    updateSharedFile(input: $input) {
      ...FileDetailsFragment
    }
  }
  ${FileDetailsFragmentFragmentDoc}
`
export type UpdateFileDetailsMutationFn = Apollo.MutationFunction<
  UpdateFileDetailsMutation,
  UpdateFileDetailsMutationVariables
>

/**
 * __useUpdateFileDetailsMutation__
 *
 * To run a mutation, you first call `useUpdateFileDetailsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFileDetailsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFileDetailsMutation, { data, loading, error }] = useUpdateFileDetailsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateFileDetailsMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFileDetailsMutation,
    UpdateFileDetailsMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateFileDetailsMutation, UpdateFileDetailsMutationVariables>(
    UpdateFileDetailsDocument,
    options,
  )
}
export type UpdateFileDetailsMutationHookResult = ReturnType<typeof useUpdateFileDetailsMutation>
export type UpdateFileDetailsMutationResult = Apollo.MutationResult<UpdateFileDetailsMutation>
export type UpdateFileDetailsMutationOptions = Apollo.BaseMutationOptions<
  UpdateFileDetailsMutation,
  UpdateFileDetailsMutationVariables
>
