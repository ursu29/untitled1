/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import gql from 'graphql-tag'
import * as ApolloReactCommon from '@apollo/react-common'
import * as ApolloReactHooks from '@apollo/react-hooks'
export type GameScoreFragmentFragment = { __typename?: 'GameScore' } & Pick<
  Types.GameScore,
  'id' | 'position' | 'score' | 'date'
> & { player: { __typename?: 'Employee' } & Pick<Types.Employee, 'id' | 'name' | 'email'> }

export type GetGameLeaderboardQueryVariables = Types.Exact<{
  input: Types.LeaderboardInput
}>

export type GetGameLeaderboardQuery = { __typename?: 'Query' } & {
  gameLeaderboard: Array<{ __typename?: 'GameScore' } & GameScoreFragmentFragment>
}

export type StartGameMutationVariables = Types.Exact<{
  input: Types.StartGameInput
}>

export type StartGameMutation = { __typename?: 'Mutation' } & {
  startGame: { __typename?: 'StartGame' } & Pick<Types.StartGame, 'secret'>
}

export type UpdateGameScoreMutationVariables = Types.Exact<{
  input: Types.UpdateScoreInput
}>

export type UpdateGameScoreMutation = { __typename?: 'Mutation' } & {
  updateGameScore: { __typename?: 'GameScore' } & Pick<Types.GameScore, 'id' | 'score'>
}

export const GameScoreFragmentFragmentDoc = gql`
  fragment GameScoreFragment on GameScore {
    id
    player {
      id
      name
      email
    }
    position
    score
    date
  }
`
export const GetGameLeaderboardDocument = gql`
  query getGameLeaderboard($input: LeaderboardInput!) {
    gameLeaderboard(input: $input) {
      ...GameScoreFragment
    }
  }
  ${GameScoreFragmentFragmentDoc}
`

/**
 * __useGetGameLeaderboardQuery__
 *
 * To run a query within a React component, call `useGetGameLeaderboardQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGameLeaderboardQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGameLeaderboardQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetGameLeaderboardQuery(
  baseOptions: ApolloReactHooks.QueryHookOptions<
    GetGameLeaderboardQuery,
    GetGameLeaderboardQueryVariables
  >,
) {
  return ApolloReactHooks.useQuery<GetGameLeaderboardQuery, GetGameLeaderboardQueryVariables>(
    GetGameLeaderboardDocument,
    baseOptions,
  )
}
export function useGetGameLeaderboardLazyQuery(
  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<
    GetGameLeaderboardQuery,
    GetGameLeaderboardQueryVariables
  >,
) {
  return ApolloReactHooks.useLazyQuery<GetGameLeaderboardQuery, GetGameLeaderboardQueryVariables>(
    GetGameLeaderboardDocument,
    baseOptions,
  )
}
export type GetGameLeaderboardQueryHookResult = ReturnType<typeof useGetGameLeaderboardQuery>
export type GetGameLeaderboardLazyQueryHookResult = ReturnType<
  typeof useGetGameLeaderboardLazyQuery
>
export type GetGameLeaderboardQueryResult = ApolloReactCommon.QueryResult<
  GetGameLeaderboardQuery,
  GetGameLeaderboardQueryVariables
>
export const StartGameDocument = gql`
  mutation startGame($input: StartGameInput!) {
    startGame(input: $input) {
      secret
    }
  }
`
export type StartGameMutationFn = ApolloReactCommon.MutationFunction<
  StartGameMutation,
  StartGameMutationVariables
>

/**
 * __useStartGameMutation__
 *
 * To run a mutation, you first call `useStartGameMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartGameMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startGameMutation, { data, loading, error }] = useStartGameMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useStartGameMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<StartGameMutation, StartGameMutationVariables>,
) {
  return ApolloReactHooks.useMutation<StartGameMutation, StartGameMutationVariables>(
    StartGameDocument,
    baseOptions,
  )
}
export type StartGameMutationHookResult = ReturnType<typeof useStartGameMutation>
export type StartGameMutationResult = ApolloReactCommon.MutationResult<StartGameMutation>
export type StartGameMutationOptions = ApolloReactCommon.BaseMutationOptions<
  StartGameMutation,
  StartGameMutationVariables
>
export const UpdateGameScoreDocument = gql`
  mutation updateGameScore($input: UpdateScoreInput!) {
    updateGameScore(input: $input) {
      id
      score
    }
  }
`
export type UpdateGameScoreMutationFn = ApolloReactCommon.MutationFunction<
  UpdateGameScoreMutation,
  UpdateGameScoreMutationVariables
>

/**
 * __useUpdateGameScoreMutation__
 *
 * To run a mutation, you first call `useUpdateGameScoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGameScoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGameScoreMutation, { data, loading, error }] = useUpdateGameScoreMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGameScoreMutation(
  baseOptions?: ApolloReactHooks.MutationHookOptions<
    UpdateGameScoreMutation,
    UpdateGameScoreMutationVariables
  >,
) {
  return ApolloReactHooks.useMutation<UpdateGameScoreMutation, UpdateGameScoreMutationVariables>(
    UpdateGameScoreDocument,
    baseOptions,
  )
}
export type UpdateGameScoreMutationHookResult = ReturnType<typeof useUpdateGameScoreMutation>
export type UpdateGameScoreMutationResult = ApolloReactCommon.MutationResult<
  UpdateGameScoreMutation
>
export type UpdateGameScoreMutationOptions = ApolloReactCommon.BaseMutationOptions<
  UpdateGameScoreMutation,
  UpdateGameScoreMutationVariables
>
