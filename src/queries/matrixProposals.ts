/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import { EmployeeDetailsFragment } from './employees'
import { gql } from '@apollo/client'
import { EmployeeDetailsFragmentDoc } from './employees'
import * as Apollo from '@apollo/client'
const defaultOptions = {}
export type GetMatrixProposalsQueryVariables = Types.Exact<{
  matrix: Types.Scalars['ID']
}>

export type GetMatrixProposalsQuery = { __typename?: 'Query' } & {
  matrixProposals: Array<
    { __typename?: 'MatrixProposal' } & Pick<
      Types.MatrixProposal,
      'id' | 'isResolved' | 'proposal' | 'cellId' | 'group' | 'grade' | 'skill'
    > & { author: { __typename?: 'Employee' } & EmployeeDetailsFragment }
  >
}

export type CreateMatrixProposalMutationVariables = Types.Exact<{
  input: Types.CreateMatrixProposalInput
}>

export type CreateMatrixProposalMutation = { __typename?: 'Mutation' } & {
  createMatrixProposal: { __typename?: 'MatrixProposal' } & Pick<Types.MatrixProposal, 'id'>
}

export type ResolveMatrixProposalMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']
}>

export type ResolveMatrixProposalMutation = { __typename?: 'Mutation' } & {
  resolveMatrixProposal: { __typename?: 'MatrixProposal' } & Pick<Types.MatrixProposal, 'id'>
}

export type DeleteMatrixProposalMutationVariables = Types.Exact<{
  id: Types.Scalars['ID']
}>

export type DeleteMatrixProposalMutation = { __typename?: 'Mutation' } & {
  deleteMatrixProposal: { __typename?: 'MatrixProposal' } & Pick<Types.MatrixProposal, 'id'>
}

export const GetMatrixProposalsDocument = gql`
  query getMatrixProposals($matrix: ID!) {
    matrixProposals(matrix: $matrix) {
      id
      isResolved
      proposal
      author {
        ...EmployeeDetails
      }
      cellId
      group
      grade
      skill
    }
  }
  ${EmployeeDetailsFragmentDoc}
`

/**
 * __useGetMatrixProposalsQuery__
 *
 * To run a query within a React component, call `useGetMatrixProposalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMatrixProposalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMatrixProposalsQuery({
 *   variables: {
 *      matrix: // value for 'matrix'
 *   },
 * });
 */
export function useGetMatrixProposalsQuery(
  baseOptions: Apollo.QueryHookOptions<GetMatrixProposalsQuery, GetMatrixProposalsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GetMatrixProposalsQuery, GetMatrixProposalsQueryVariables>(
    GetMatrixProposalsDocument,
    options,
  )
}
export function useGetMatrixProposalsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    GetMatrixProposalsQuery,
    GetMatrixProposalsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GetMatrixProposalsQuery, GetMatrixProposalsQueryVariables>(
    GetMatrixProposalsDocument,
    options,
  )
}
export type GetMatrixProposalsQueryHookResult = ReturnType<typeof useGetMatrixProposalsQuery>
export type GetMatrixProposalsLazyQueryHookResult = ReturnType<
  typeof useGetMatrixProposalsLazyQuery
>
export type GetMatrixProposalsQueryResult = Apollo.QueryResult<
  GetMatrixProposalsQuery,
  GetMatrixProposalsQueryVariables
>
export const CreateMatrixProposalDocument = gql`
  mutation createMatrixProposal($input: CreateMatrixProposalInput!) {
    createMatrixProposal(input: $input) {
      id
    }
  }
`
export type CreateMatrixProposalMutationFn = Apollo.MutationFunction<
  CreateMatrixProposalMutation,
  CreateMatrixProposalMutationVariables
>

/**
 * __useCreateMatrixProposalMutation__
 *
 * To run a mutation, you first call `useCreateMatrixProposalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateMatrixProposalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createMatrixProposalMutation, { data, loading, error }] = useCreateMatrixProposalMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateMatrixProposalMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateMatrixProposalMutation,
    CreateMatrixProposalMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateMatrixProposalMutation, CreateMatrixProposalMutationVariables>(
    CreateMatrixProposalDocument,
    options,
  )
}
export type CreateMatrixProposalMutationHookResult = ReturnType<
  typeof useCreateMatrixProposalMutation
>
export type CreateMatrixProposalMutationResult = Apollo.MutationResult<CreateMatrixProposalMutation>
export type CreateMatrixProposalMutationOptions = Apollo.BaseMutationOptions<
  CreateMatrixProposalMutation,
  CreateMatrixProposalMutationVariables
>
export const ResolveMatrixProposalDocument = gql`
  mutation resolveMatrixProposal($id: ID!) {
    resolveMatrixProposal(id: $id) {
      id
    }
  }
`
export type ResolveMatrixProposalMutationFn = Apollo.MutationFunction<
  ResolveMatrixProposalMutation,
  ResolveMatrixProposalMutationVariables
>

/**
 * __useResolveMatrixProposalMutation__
 *
 * To run a mutation, you first call `useResolveMatrixProposalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResolveMatrixProposalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resolveMatrixProposalMutation, { data, loading, error }] = useResolveMatrixProposalMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useResolveMatrixProposalMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ResolveMatrixProposalMutation,
    ResolveMatrixProposalMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<ResolveMatrixProposalMutation, ResolveMatrixProposalMutationVariables>(
    ResolveMatrixProposalDocument,
    options,
  )
}
export type ResolveMatrixProposalMutationHookResult = ReturnType<
  typeof useResolveMatrixProposalMutation
>
export type ResolveMatrixProposalMutationResult =
  Apollo.MutationResult<ResolveMatrixProposalMutation>
export type ResolveMatrixProposalMutationOptions = Apollo.BaseMutationOptions<
  ResolveMatrixProposalMutation,
  ResolveMatrixProposalMutationVariables
>
export const DeleteMatrixProposalDocument = gql`
  mutation deleteMatrixProposal($id: ID!) {
    deleteMatrixProposal(id: $id) {
      id
    }
  }
`
export type DeleteMatrixProposalMutationFn = Apollo.MutationFunction<
  DeleteMatrixProposalMutation,
  DeleteMatrixProposalMutationVariables
>

/**
 * __useDeleteMatrixProposalMutation__
 *
 * To run a mutation, you first call `useDeleteMatrixProposalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteMatrixProposalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteMatrixProposalMutation, { data, loading, error }] = useDeleteMatrixProposalMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteMatrixProposalMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteMatrixProposalMutation,
    DeleteMatrixProposalMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteMatrixProposalMutation, DeleteMatrixProposalMutationVariables>(
    DeleteMatrixProposalDocument,
    options,
  )
}
export type DeleteMatrixProposalMutationHookResult = ReturnType<
  typeof useDeleteMatrixProposalMutation
>
export type DeleteMatrixProposalMutationResult = Apollo.MutationResult<DeleteMatrixProposalMutation>
export type DeleteMatrixProposalMutationOptions = Apollo.BaseMutationOptions<
  DeleteMatrixProposalMutation,
  DeleteMatrixProposalMutationVariables
>
