/**
 * DO NOT EDIT THIS FILE
 * This file was automatically generated from GraphQL queries and should not be edited.
 * Please change queries in *.graphql file and run codegen script if necessary.
 */
import * as Types from '../types/graphql'

import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
const defaultOptions = {}
export type CreateGuildMutationVariables = Types.Exact<{
  input: Types.CreateGuildInput
}>

export type CreateGuildMutation = { __typename?: 'Mutation' } & {
  createGuild?: Types.Maybe<{ __typename?: 'Guild' } & Pick<Types.Guild, 'id'>>
}

export type UpdateGuildMutationVariables = Types.Exact<{
  input: Types.UpdateGuildInput
}>

export type UpdateGuildMutation = { __typename?: 'Mutation' } & {
  updateGuild?: Types.Maybe<{ __typename?: 'Guild' } & Pick<Types.Guild, 'id'>>
}

export const CreateGuildDocument = gql`
  mutation createGuild($input: CreateGuildInput!) {
    createGuild(input: $input) {
      id
    }
  }
`
export type CreateGuildMutationFn = Apollo.MutationFunction<
  CreateGuildMutation,
  CreateGuildMutationVariables
>

/**
 * __useCreateGuildMutation__
 *
 * To run a mutation, you first call `useCreateGuildMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGuildMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGuildMutation, { data, loading, error }] = useCreateGuildMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateGuildMutation(
  baseOptions?: Apollo.MutationHookOptions<CreateGuildMutation, CreateGuildMutationVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateGuildMutation, CreateGuildMutationVariables>(
    CreateGuildDocument,
    options,
  )
}
export type CreateGuildMutationHookResult = ReturnType<typeof useCreateGuildMutation>
export type CreateGuildMutationResult = Apollo.MutationResult<CreateGuildMutation>
export type CreateGuildMutationOptions = Apollo.BaseMutationOptions<
  CreateGuildMutation,
  CreateGuildMutationVariables
>
export const UpdateGuildDocument = gql`
  mutation updateGuild($input: UpdateGuildInput!) {
    updateGuild(input: $input) {
      id
    }
  }
`
export type UpdateGuildMutationFn = Apollo.MutationFunction<
  UpdateGuildMutation,
  UpdateGuildMutationVariables
>

/**
 * __useUpdateGuildMutation__
 *
 * To run a mutation, you first call `useUpdateGuildMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGuildMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGuildMutation, { data, loading, error }] = useUpdateGuildMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGuildMutation(
  baseOptions?: Apollo.MutationHookOptions<UpdateGuildMutation, UpdateGuildMutationVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateGuildMutation, UpdateGuildMutationVariables>(
    UpdateGuildDocument,
    options,
  )
}
export type UpdateGuildMutationHookResult = ReturnType<typeof useUpdateGuildMutation>
export type UpdateGuildMutationResult = Apollo.MutationResult<UpdateGuildMutation>
export type UpdateGuildMutationOptions = Apollo.BaseMutationOptions<
  UpdateGuildMutation,
  UpdateGuildMutationVariables
>
