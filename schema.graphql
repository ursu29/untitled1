directive @accessControl(allowedGroups: [AllowedGroups]!) on FIELD_DEFINITION

directive @accessRights(allowRead: [AllowedGroups], allowWrite: [AllowedGroups]) on FIELD_DEFINITION

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE

directive @canEditBookmark on FIELD_DEFINITION

enum ACCESS_GROUP {
  REVIEWERS
  FEEDBACK
  HR_RU
  HR_EDITORS
  NEWS_EDITORS
  TECH_PORTAL
  DEV_PORTAL
  WORKSPACE_PLANNER
  SYS_ADMINS
  HR_ADMINS
  SUPER_USER
  WIKI_EDITORS
  LIBRARIAN
}

input AbortProcessExecutionInput {
  id: ID!
}

type Access {
  read: Boolean
  write: Boolean
}

input AccessInput {
  employeeEmail: String
}

enum AllowedGroups {
  GENERAL
  GENERAL_EXC_ME
  ME
  TECH_PORTAL
  HR_RU
  WIKI_EDITORS
  HR_EDITORS
  HR_ADMINS
  REVIEWERS
  DEVELOPMENT_PLAN_REVIEWERS
  MATRICES_REVIEWERS
  FEEDBACK
  WORKSPACE_PLANNER
  SYS_ADMINS
  SUPER_USER
  LIBRARIAN
  AAD_CREATORS
  AAD_USER_EDITORS
  AAD_GROUP_EDITORS
}

type ArchiveDP {
  compressedData: DevelopmentPlan
}

input ArchiveDPInput {
  employee: ID!
}

type ArchiveMatrix {
  matrixId: ID!
  compressedData: String!
}

input ArchiveMatrixInput {
  employee: ID!
  matrixId: ID!
  employeeMatrixId: ID
}

type ArchiveSEF {
  compressedData: String!
}

input ArchiveSEFInput {
  employee: ID!
}

type ArchivedDPVersion {
  id: ID!
  createdAt: String!
}

type ArchivedMatrixVersion {
  id: ID!
  createdAt: String!
}

type ArchivedSEFVersion {
  id: ID!
  createdAt: String!
}

input AttachMatrixToEmployeeInput {
  matrix: ID
  employee: ID
}

type Book {
  id: ID!
  title: String!
  author: String!
  holder: Employee
  tags: [Skill!]!
}

input BookingsInput {
  startDate: String
  finishDate: String
}

type Bookmark {
  id: ID!
  title: String!
  link: String!
  employee: Employee!
  skills: [Skill!]
  likes: [Bookmarklike]
  access: Access
  createdAt: String
  likedByMe: Boolean
}

type Bookmarklike {
  id: ID!
  employee: Employee!
  bookmark: Bookmark
}

input BookmarksInput {
  employee: String
  skills: [ID!]
}

enum CUSTOMER {
  INTERNAL
  SWISSRE
  ALLIANZ
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input CancelEventInput {
  id: ID!
  comment: String
}

input CancelOfficeBookingInput {
  dateStart: String!
  dateEnd: String
  location: LOCATION!
}

input CancelRotateRequestInput {
  id: ID!
  candidate: ID!
}

type Certificate {
  id: ID!
  name: String
  date: String
  expirationDate: String
  link: String
}

input CertificateInput {
  id: ID
  name: String
  date: String
  expirationDate: String
  link: String
}

input CloseVacancyInput {
  id: ID!
}

input CommentEvaluationInput {
  employee: ID
  body: String
  evaluationAttribute: ID
}

input CommentMatrixInput {
  id: ID!
  comment: String
}

input CommentProcessExecutionStepInput {
  execution: ID!
  step: ID!
  description: String!
}

input CompleteOnboardingTicketInput {
  id: ID!
}

input CompleteProcessExecutionStepInput {
  execution: ID!
  step: ID!
}

input CreateBookInput {
  title: String
  author: String
  tags: [String]
  holder: ID
}

input CreateBookmarkInput {
  title: String
  link: String
  skills: [ID]
}

input CreateDevrelInput {
  type: String!
  title: String
  link: String
  resource: String
  dateStart: String
  dateEnd: String
  skills: [ID!]
}

input CreateEmployeeInput {
  email: String
  name: String
  firstName: String
  lastName: String
}

input CreateEmployeeProjectsInput {
  employeeMail: String
  projectId: String
}

input CreateEvaluationReviewerInput {
  fromWho: ID
  toWhom: ID
}

input CreateEventInput {
  title: String!
  description: String
  link: String
  start: String!
  end: String!
  importance: IMPORTANCE!
  isAllDay: Boolean
  isDraft: Boolean
  isOnline: Boolean
  isExternal: Boolean
  city: String
  location: String
  skills: [ID]
}

input CreateExperienceInput {
  skill: ID!
  level: LEVEL
  employee: ID
  comment: String
}

input CreateGuildInput {
  displayName: String
  description: String
  members: [String!]
}

input CreateHobbyInput {
  name: String!
  description: String
}

input CreateHobbyPostInput {
  title: String!
  body: String!
  hobbies: [ID!]!
  language: LANGUAGE!
  eventDate: String
  eventLocation: String
}

input CreateMatrixGradeInput {
  matrixId: ID!
  title: String!
  description: String
}

input CreateMatrixGroupInput {
  matrixId: ID!
  title: String!
  description: String
}

input CreateMatrixInput {
  title: String!
  description: String
}

input CreateMatrixProposalInput {
  proposal: String!
  matrix: String!
  cellId: ID!
}

input CreateMatrixSkillInput {
  matrixId: ID!
  skillId: ID!
  gradeId: ID!
  groupId: ID!
}

input CreateOfficeBookingInput {
  dateStart: String!
  dateEnd: String
  location: LOCATION!
  skipWeekends: Boolean
}

input CreateOnboardingTicketInput {
  title: String
  description: String
  responsible: String
  isOptional: Boolean
  isSwissre: Boolean
}

input CreatePostInput {
  title: String!
  body: String!
  isTranslated: Boolean
  language: LANGUAGE
  locations: [LOCATION]
  images: [String]
  tags: [String]
}

input CreateProcessExecutionInput {
  process: ID!
  locations: [ID]
  project: ID
  projectFrom: ID
  projectTo: ID
  prio: Int
}

input CreateProcessInput {
  title: String
  customer: CUSTOMER
  nextCustomer: CUSTOMER
  type: PROCESS_TYPE
}

input CreateProcessStepInput {
  parentSteps: [ID]
  process: ID!
}

input CreateProjectInput {
  displayName: String!
  description: String
  email: String
  members: [String!]
}

input CreateSkillInput {
  name: String!
  description: String
  parent: ID
  isMatrixOnly: Boolean
}

input CreateTagInput {
  name: String!
  description: String
}

input CreateWikiPageInput {
  path: String
}

input CreateWorkplaceBookingInput {
  workplace: ID!
  startDate: String!
  finishDate: String!
}

input CreateWorkplaceInput {
  workspace: ID!
  coordX: Int!
  coordY: Int!
}

input CreateWorkspaceInput {
  name: String!
  location: LOCATION!
}

type CurriculumVitae {
  id: ID!
  employee: Employee!
  summary: String
  languages: String
  vitaes: [Vitae!]
  certificates: [Certificate!]
  education: [Education!]
}

input DeleteBookmarkInput {
  id: ID
}

input DeleteEvaluationReviewerInput {
  fromWho: ID
  toWhom: ID
}

input DeleteExperienceInput {
  id: ID
}

input DeleteFeedbackInput {
  id: ID!
}

input DeleteMatrixGradeInput {
  matrix: ID
  id: ID
}

input DeleteMatrixGroupInput {
  matrix: ID
  id: ID
}

input DeleteMatrixSkillInput {
  matrix: ID
  id: ID
}

input DeleteOnboardingTicketInput {
  id: ID!
}

input DeletePostInput {
  id: ID!
}

input DeleteSkillInput {
  id: ID!
}

input DetachMatrixFromEmployeeInput {
  matrix: ID
  employee: ID
}

type DevToolsGitInfo {
  repoName: String
  branchName: String
  commitId: String
  commitMsg: String
}

type DevelopmentGoal {
  id: ID
  description: String
  successCriteria: String
  isAchieved: Boolean
  comment: String
  createdAt: String
  updatedAt: String
}

input DevelopmentGoalInput {
  id: ID
  description: String
  successCriteria: String
  isAchieved: Boolean
  comment: String
}

type DevelopmentPlan {
  id: ID!
  createdAt: String
  updatedAt: String
  developmentRoles: DevelopmentRoles
  guildContribution: GuildContribution
  previousGoals: [DevelopmentGoal]
  actualGoals: [DevelopmentGoal]
  amountOfTime: String
  longTermGoals: String
  lookBackNegative: String
  lookBackPositive: String
  lookForward: String
  employee: Employee
  lastDiscussed: String
}

input DevelopmentPlansInput {
  employee: ID
}

type DevelopmentRoles {
  webDeveloper: Boolean
  actuarialBusinessAnalyst: Boolean
  agileCoach: Boolean
  automationQA: Boolean
  devOps: Boolean
  dotnetDeveloper: Boolean
  infrastructureArchitect: Boolean
  javaDeveloper: Boolean
  manualQA: Boolean
  mathematician: Boolean
  scrumMaster: Boolean
  solutionArchitect: Boolean
  teamLead: Boolean
  uxExpert: Boolean
  productOwner: Boolean
  dataAnalyst: Boolean
  supportEngineer: Boolean
  otherAreas: String
}

input DevelopmentRolesInput {
  webDeveloper: Boolean
  actuarialBusinessAnalyst: Boolean
  agileCoach: Boolean
  agileManager: Boolean
  automationQA: Boolean
  devOps: Boolean
  dotnetDeveloper: Boolean
  infrastructureArchitect: Boolean
  javaDeveloper: Boolean
  manualQA: Boolean
  mathematician: Boolean
  scrumMaster: Boolean
  solutionArchitect: Boolean
  teamLead: Boolean
  uxExpert: Boolean
  productOwner: Boolean
  dataAnalyst: Boolean
  supportEngineer: Boolean
  otherAreas: String
}

type Devrel {
  id: ID!
  type: String!
  title: String
  link: String
  resource: String
  dateStart: String
  dateEnd: String
  employee: Employee
  isCompleted: Boolean
  isDraft: Boolean
  skills: [Skill]
}

type Education {
  id: ID!
  name: String
  speciality: String
  degree: String
  dateStart: String
  dateEnd: String
}

input EducationInput {
  id: ID
  name: String
  speciality: String
  degree: String
  dateStart: String
  dateEnd: String
}

type Employee {
  id: ID!
  strapiId: ID @deprecated(reason: "id === strapiId")
  name: String!
  firstName: String!
  lastName: String!
  position: String
  country: String @deprecated
  location: LOCATION
  phoneNumber: String
  email: String!
  startDate: String
  birthday: String
  isDismissed: Boolean
  bonuses: Float
  projects: [Project!]
  employeeProjects: [EmployeeProject!]
  experiences: [Experience!]
  access: Access
  avatar: String @deprecated
  manager: Employee @deprecated
  subordinateUsers: [Employee!]
  subordinateUsersCount: SubordinateUsersCount
  agileManager: Employee
  isMe: Boolean
  status: String
  matrices: [Matrix!]
  worksFromOffice: [String!]
  activeProcessExecutions: [ProcessExecution!]
  lastManagerMeeting: String
  one2oneRequest: Boolean
  accessEditGlobal: Boolean
  strapiGroupsMembership: [String!]
  requestedOnboardingTickets(withResponsible: String): [OnboardingTicket!]
  about: String
  curriculumVitae: CurriculumVitae
  developmentPlanReviewers: [Employee!]
  matricesReviewers: [Employee!]
  hobbies: [Hobby!]!
}

type EmployeeProject {
  id: ID!
  capacity: Int
  isExtraCapacity: Boolean
  project: Project
  employee: Employee
}

input EmployeeProjectInput {
  id: String!
  capacity: Int
  isExtraCapacity: Boolean
}

input EmployeesInput {
  email: String
  id: ID
  locations: [LOCATION]
}

input EvaluateInput {
  toWhom: ID
  evaluation: Int
  comment: String
  evaluationAttribute: ID
}

type Evaluation {
  id: ID!
  fromWho: Employee
  toWhom: Employee
  evaluation: Int
  comment: String
  updatedAt: String
  evaluationAttribute: EvaluationAttribute
}

type EvaluationAttribute {
  id: ID!
  title: String
  description: String
  group: String
  index: Int
}

type EvaluationComment {
  id: ID!
  body: String
  employee: Employee
  evaluationAttribute: EvaluationAttribute
  editable: Boolean
}

input EvaluationCommentsInput {
  employee: ID
}

type EvaluationCustomFields {
  id: ID!
  employeeMail: String
  lastDiscussed: String
}

input EvaluationCustomFieldsInput {
  employee: ID!
}

type EvaluationReviewer {
  id: ID!
  fromWho: Employee
  toWhom: Employee
}

input EvaluationReviewersAccessInput {
  toWhom: ID
}

input EvaluationReviewersInput {
  toWhom: ID
}

input EvaluationsInput {
  employee: ID
}

type Event {
  id: ID!
  title: String!
  description: String
  link: String
  createdBy: Employee!
  start: String
  end: String
  importance: IMPORTANCE
  isAllDay: Boolean
  isDraft: Boolean
  isOnline: Boolean
  isExternal: Boolean
  city: String
  location: String
  skills: [Skill]
  attendees: [EventAttendee]
  isAttendAll: Boolean
}

type EventAttendee {
  employee: Employee
  type: String
  status: String
}

input EventsInput {
  start: String!
  end: String!
}

type Experience {
  id: ID!
  employee: Employee
  level: LEVEL
  skill: Skill
  updatedAt: String
  comment: String
}

input ExperiencesInput {
  employee: ID
  skill: ID
  noMatrixSkills: Boolean
}

enum FEEDBACK_ABOUT {
  COMPANY
  TEAM
  EVENT
  PORTAL
}

type Feedback {
  id: ID!
  about: FEEDBACK_ABOUT
  project: Project
  text: String
  createdAt: String
  comments: [FeedbackComment!]
}

type FeedbackComment {
  id: ID!
  text: String
  createdAt: String
}

input FeedbackInput {
  about: FEEDBACK_ABOUT!
  project: String
  text: String!
  isPrivate: Boolean = false
}

input FeedbackReplyInput {
  feedbackId: ID!
  text: String!
}

input FeedbacksInput {
  search: String
  about: FEEDBACK_ABOUT
  project: String
  limit: Int = 10
  offset: Int = 0
}

type File {
  id: ID!
  url: String
  fileName: String
}

type FoundWikiPage {
  id: ID!
  title: String
  path: String!
  textFragment: String!
}

type GameScore {
  id: ID!
  player: Employee!
  position: Int!
  score: Int!
  date: String!
}

enum GameType {
  SNAKE
}

input GetArchivedDPInput {
  id: ID!
}

input GetArchivedMatrixInput {
  id: ID!
}

input GetArchivedSEFInput {
  id: ID!
}

type Guild {
  id: ID
  azureId: ID @deprecated
  code: String!
  azureDisplayName: String @deprecated(reason: "use code")
  leaders: [Employee!]
  title: String
  description: String
  shortDescription: String
  skills: [Skill!]
  accessWrite: Boolean
}

type GuildContribution {
  internalProject: Boolean
  education: Boolean
  noContribution: Boolean
  startup: Boolean
  custom: String
}

input GuildContributionInput {
  internalProject: Boolean
  education: Boolean
  noContribution: Boolean
  startup: Boolean
  custom: String
}

input GuildInput {
  azureDisplayName: String
}

type Hobby {
  id: ID!
  name: String!
  description: String
  isMember: Boolean!
  members: [Employee!]!
}

type HobbyPost {
  id: ID!
  title: String!
  body: String!
  slug: String!
  createdAt: String
  createdBy: Employee
  hobbies: [Hobby!]!
  language: LANGUAGE!
  comments: [HobbyPostComment!]
  editable: Boolean!
  eventDate: String
  eventLocation: String
}

type HobbyPostComment {
  id: ID!
  body: String
  createdAt: String
  createdBy: Employee
}

input HobbyPostFilterInput {
  first: Int
  after: ID
  search: String
  hobbies: [ID!]
  language: LANGUAGE
}

input HobbyPostReplyInput {
  postId: ID!
  body: String!
}

enum IMPORTANCE {
  HIGH
  NORMAL
  LOW
}

input JoinHobbyInput {
  id: ID!
  join: Boolean!
}

enum LANGUAGE {
  RU
  EN
}

enum LEVEL {
  WANTED
  LEARNING
  EXPERIENCED
  CONFIDENT
}

enum LOCATION {
  SAINT_PETERSBURG
  KALININGRAD
  TOMSK
  ZURICH
}

input LeaderboardInput {
  game: GameType!
}

type MatricesCustomFields {
  id: ID!
  employeeMail: String
  lastDiscussed: String
}

input MatricesCustomFieldsInput {
  employee: ID!
}

"""
   input MatrixSkillInput {
  id: ID!
  skillId: String!
  type: String
  groupId: ID!
  gradeId: ID!
}
"""
input MatricesInput {
  id: ID
}

type Matrix {
  id: ID!
  title: String
  description: String
  body: MatrixBody
  employees: [Employee!]
  access: Access
  comment: String
  employeeMatrixId: String
}

type MatrixBody {
  groups: [MatrixGroup]
  grades: [MatrixGrade]
  skills: [MatrixSkill]
}

type MatrixGrade {
  id: ID!
  title: String
  description: String
}

type MatrixGroup {
  id: ID!
  title: String
  description: String
}

type MatrixProposal {
  id: ID!
  isResolved: Boolean!
  proposal: String!
  author: Employee!
  matrix: Matrix!
  cellId: ID!
  group: String
  grade: String
  skill: String
}

type MatrixSkill {
  id: ID
  type: String
  skill: Skill
  groupId: ID!
  gradeId: ID!
}

input MutateHelloInput {
  hello: String
}

type Mutation {
  mutateHello(input: MutateHelloInput): String
  updateAccessGroup(input: UpdateAccessGroupInput): String
  archiveDP(input: ArchiveDPInput): ArchiveDP
  archiveSEF(input: ArchiveSEFInput): ArchiveSEF
  archiveMatrix(input: ArchiveMatrixInput): ArchiveMatrix
  createBookmark(input: CreateBookmarkInput!): Bookmark
  updateBookmark(input: UpdateBookmarkInput!): Bookmark
  deleteBookmark(input: DeleteBookmarkInput!): Bookmark
  toggleBookmarklike(input: ToggleBookmarklikeInput!): Bookmarklike
  createBook(input: CreateBookInput): Book
  updateBook(input: UpdateBookInput): Book
  removeBook(id: ID!): Book
  takeBook(id: ID!): Book
  updateCurriculumVitae(input: UpdateCurriculumVitaeInput!): CurriculumVitae
  updateDevelopmentPlan(input: UpdateDevelopmentPlanInput!): DevelopmentPlan
  createDevrel(input: CreateDevrelInput!): Devrel
  updateDevrel(input: UpdateDevrelInput!): Devrel
  proposeDevrelEvent(input: ProposeDevrelEventInput!): Boolean
  participateDevrelEvent(id: ID!): Boolean
  acceptDevrel(id: ID!): Devrel
  deleteDevrel(id: ID!): Devrel
  updateDevelopmentPlanReviewers(input: ReviewerInput): [Employee!]
  updateMatricesReviewers(input: ReviewerInput): [Employee!]
  updateEmployee(input: UpdateEmployeeInput!): Employee
  createEmployee(input: CreateEmployeeInput!): Employee
  updateEmployeeProjects(input: [UpdateEmployeeProjectsInput!]!): [EmployeeProject]
  removeEmployeeProjects(ids: [String!]!): [EmployeeProject]
  createEmployeeProjects(input: [CreateEmployeeProjectsInput!]!): [EmployeeProject]
  createEvaluationReviewer(input: CreateEvaluationReviewerInput): [EvaluationReviewer]
  deleteEvaluationReviewer(input: DeleteEvaluationReviewerInput): EvaluationReviewer
  evaluate(input: EvaluateInput!): Evaluation
  commentEvaluation(input: CommentEvaluationInput!): EvaluationComment
  updateCustomFields(input: UpdateCustomFieldsInput): EvaluationCustomFields
  createEvent(input: CreateEventInput!): Event
  updateEvent(input: UpdateEventInput!): Event
  cancelEvent(input: CancelEventInput!): ID
  attendEvent(id: ID!): Boolean
  attendEventEveryone(id: ID!): Boolean
  createExperience(input: CreateExperienceInput): Experience
  updateExperience(input: UpdateExperienceInput): Experience
  updateExperiences(input: UpdateExperiencesInput): [Experience]
  deleteExperience(input: DeleteExperienceInput): Experience
  addFeedback(input: FeedbackInput!): Feedback
  deleteFeedback(input: DeleteFeedbackInput!): Feedback
  replyFeedback(input: FeedbackReplyInput!): FeedbackComment
  updateSharedFile(input: UpdateSharedFileInput!): SharedFile
  startGame(input: StartGameInput!): StartGame!
  updateGameScore(input: UpdateScoreInput!): GameScore!
  updateGuild(input: UpdateGuildInput): Guild
  createGuild(input: CreateGuildInput): Guild
  createHobby(input: CreateHobbyInput!): Hobby
  updateHobby(input: UpdateHobbyInput!): Hobby
  joinHobby(input: JoinHobbyInput!): Hobby
  updateEmployeeHobbies(input: UpdateEmployeeHobbiesInput!): Employee
  createHobbyPost(input: CreateHobbyPostInput!): HobbyPost
  updateHobbyPost(input: UpdateHobbyPostInput!): HobbyPost
  replyHobbyPost(input: HobbyPostReplyInput!): HobbyPost
  attachMatrixToEmployee(input: AttachMatrixToEmployeeInput): Matrix
  detachMatrixFromEmployee(input: DetachMatrixFromEmployeeInput): Matrix
  createMatrix(input: CreateMatrixInput): Matrix
  updateMatrix(input: UpdateMatrixInput): Matrix
  commentMatrix(input: CommentMatrixInput): Matrix
  reorderMatrixSkills(input: ReorderMatrixSkillsInput): ID
  createMatrixSkill(input: CreateMatrixSkillInput): Matrix
  deleteMatrixSkill(input: DeleteMatrixSkillInput): Matrix
  createMatrixGroup(input: CreateMatrixGroupInput): Matrix
  deleteMatrixGroup(input: DeleteMatrixGroupInput): Matrix
  createMatrixGrade(input: CreateMatrixGradeInput): Matrix
  deleteMatrixGrade(input: DeleteMatrixGradeInput): Matrix
  updateMatricesCustomFields(input: UpdateMatricesCustomFieldsInput): MatricesCustomFields
  createMatrixProposal(input: CreateMatrixProposalInput!): MatrixProposal!
  resolveMatrixProposal(id: ID!): MatrixProposal!
  deleteMatrixProposal(id: ID!): MatrixProposal!
  unsubscribeNotification(ids: [ID!]!): [ID!]
  createOfficeBooking(input: CreateOfficeBookingInput!): Boolean
  cancelOfficeBooking(input: CancelOfficeBookingInput!): Boolean
  updateOfficeDays(input: UpdateOfficeDaysInput!): Boolean
  createOnboardingTicket(input: CreateOnboardingTicketInput): OnboardingTicket
  updateOnboardingTicket(input: UpdateOnboardingTicketInput): OnboardingTicket
  deleteOnboardingTicket(input: DeleteOnboardingTicketInput): OnboardingTicket
  completeOnboardingTicket(input: CompleteOnboardingTicketInput): ID
  cancelOnboardingTicket(input: CompleteOnboardingTicketInput): ID
  requestOnboardingTicket(id: ID!): ID
  createPost(input: CreatePostInput): Post
  updatePost(input: UpdatePostInput): Post
  deletePost(input: DeletePostInput): Post
  createProcess(input: CreateProcessInput): Process
  updateProcess(input: UpdateProcessInput): Process
  deleteProcess(id: ID!): Process
  createProcessStep(input: CreateProcessStepInput): ProcessStep
  updateProcessStep(input: UpdateProcessStepInput): ProcessStep
  deleteProcessStep(id: ID!): ProcessStep
  createProcessExecution(input: CreateProcessExecutionInput): ProcessExecution
  updateProcessExecution(input: UpdateProcessExecutionInput): ProcessExecution
  abortProcessExecution(input: AbortProcessExecutionInput!): ProcessExecution
  toggleHoldProcessExecution(input: AbortProcessExecutionInput!): ProcessExecution
  rotateEmployee(input: RotateEmployeeInput!): ProcessExecution
  completeProcessExecutionStep(input: CompleteProcessExecutionStepInput!): ProcessExecutionStep
  commentProcessExecutionStep(input: CommentProcessExecutionStepInput!): ProcessExecutionStep
  deleteHrVacancy(id: ID!): ProcessExecution
  updateProject(input: UpdateProjectInput!): Project
  updateProjectSkills(input: UpdateProjectSkillsInput!): Project
  createProject(input: CreateProjectInput!): Project
  createSkill(input: CreateSkillInput): Skill
  updateSkill(input: UpdateSkillInput): Skill
  deleteSkill(input: DeleteSkillInput!): Skill
  createTag(input: CreateTagInput!): Tag
  updateVacancy(input: UpdateVacancyInput): Vacancy
  publishVacancy(input: PublishVacancyInput): Vacancy
  closeVacancy(input: CloseVacancyInput): Vacancy
  rotateRequest(input: RotateRequestInput): Vacancy
  cancelRotateRequest(input: CancelRotateRequestInput): Vacancy
  updateWikiPage(input: UpdateWikiPageInput): WikiPage
  createWikiPage(input: CreateWikiPageInput): WikiPage
  removeWikiPage(input: RemoveWikiPageInput): WikiPage
  createWorkspace(input: CreateWorkspaceInput): Workspace
  updateWorkspace(input: UpdateWorkspaceInput): Workspace
  deleteWorkspace(id: ID!): Workspace
  createWorkplace(input: CreateWorkplaceInput): Workplace
  updateWorkplace(input: UpdateWorkplaceInput): Workplace
  deleteWorkplace(id: ID!): Workplace
  createWorkplaceBooking(input: CreateWorkplaceBookingInput): WorkplaceBooking
  deleteWorkplaceBooking(id: ID!): WorkplaceBooking
}

type Notification {
  id: ID!
  link: String!
  title: String!
  type: String!
}

type OfficeDay {
  id: ID!
  date: String
  employeeLimit: Int
  location: LOCATION
  employees: [Employee!]
}

input OfficeDaysInput {
  dateStart: String!
  dateEnd: String!
}

type OnboardingTicket {
  id: ID!
  title: String
  description: String
  responsible: [Employee!]
  isOptional: Boolean
  isSwissre: Boolean
  isRequestedByMe: Boolean
}

enum PROCESS_EXECUTION_STATUS {
  RUNNING
  FINISHED
  CANCELLED
  HOLDING
}

enum PROCESS_STEP_TYPE {
  APPROVE
  NOTIFY
  INDEPENDENT
}

enum PROCESS_TYPE {
  ROTATION
  ONBOARDING
  OFFBOARDING
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
  endCursor: ID
}

type Post {
  id: ID!
  title: String!
  slug: String!
  body: String!
  createdAt: String
  updatedAt: String @deprecated
  createdBy: Employee
  isTranslated: Boolean @deprecated
  language: LANGUAGE!
  locations: [LOCATION!]
  images: [File] @deprecated
  tags: [Tag]
}

type PostEdge {
  node: Post
}

input PostsFilter {
  tags: [ID]
  isTranslated: Boolean
  language: LANGUAGE
  text: String
}

type Process {
  id: ID!
  title: String
  customer: CUSTOMER
  nextCustomer: CUSTOMER
  type: PROCESS_TYPE
  isRotation: Boolean
  steps: [ProcessStep]
}

type ProcessExecution {
  id: ID!
  process: Process
  vacancy: Vacancy
  locations: [LOCATION!]
  project: Project
  projectFrom: Project
  projectTo: Project
  status: String
  substatus: String
  executionSteps: [ProcessExecutionStep]
  employee: String
  employeeRef: Employee
  employeePhone: String
  finishDate: String
  activeStepEmployees: [Employee!]
  swissReOffboardingDate: String
  isIndependentStepsActive: Boolean
  prio: Int
  updatedAt: String
}

type ProcessExecutionComment {
  id: ID!
  body: String
  employee: Employee
  createdAt: String
  step: ProcessExecutionStep
}

type ProcessExecutionStep {
  id: ID!
  execution: ProcessExecution!
  step: ProcessStep
  isDone: Boolean
  description: String
}

input ProcessExecutionsInput {
  id: ID!
}

type ProcessStep {
  id: ID!
  title: String
  description: String
  type: PROCESS_STEP_TYPE
  responsibleUsers: [Employee!]
  sendToTeamlead: Boolean
  send24hoursNotification: Boolean
  isAgileResponsible: Boolean
  parentSteps: [ProcessStep]
  process: Process
  hasComment: Boolean
}

type Project {
  id: ID!
  name: String!
  code: String!
  description: String
  leaders: [Employee!]
  employees: [Employee!]
  skills: [Skill!]
  access: Access
  scrumMasters: [Employee!]
  accessEditGlobal: Boolean
  employeeProjects: [EmployeeProject!]
}

input ProposeDevrelEventInput {
  title: String!
  link: String
  dateStart: String!
  dateEnd: String!
}

input PublishVacancyInput {
  id: ID!
}

type Query {
  hello: String
  isAuthenticated: Boolean
  getMembersOf(group: String): [Employee!]
  archivedDPVersions(input: ArchiveDPInput): [ArchivedDPVersion]
  archivedDP(input: GetArchivedDPInput): ArchiveDP
  archivedSEFVersions(input: ArchiveSEFInput): [ArchivedSEFVersion]
  archivedSEF(input: GetArchivedSEFInput): ArchiveSEF
  archivedMatrixVersions(input: ArchiveMatrixInput): [ArchivedMatrixVersion]
  archivedMatrix(input: GetArchivedMatrixInput): ArchiveMatrix
  bookmarks(input: BookmarksInput): [Bookmark]
  bookmarkByLink(link: String!): Bookmark
  books(skills: [ID!]): [Book!]!
  clientDevToolsAccess: Boolean
  clientDevToolsGitInfo: DevToolsGitInfo
  curriculumVitaeAccess(input: AccessInput): Access
  developmentPlans(input: DevelopmentPlansInput!): DevelopmentPlan
  devrels(type: String!): [Devrel!]!
  developmentPlanLookReviewersAccess(input: AccessInput): Access
  matricesLookReviewersAccess(input: AccessInput): Access
  employee(id: ID!): Employee
  employeeByEmail(email: String!): Employee
  employees(input: EmployeesInput): [Employee!]
  profile: Employee
  employeesProjects(emails: [String!]!): [EmployeeProject!]!
  evaluationReviewersAccess(input: EvaluationReviewersAccessInput): Access
  evaluationReviewers(input: EvaluationReviewersInput): [EvaluationReviewer]
  evaluationAttributes: [EvaluationAttribute]
  evaluationComments(input: EvaluationCommentsInput): [EvaluationComment]
  evaluations(input: EvaluationsInput!): [Evaluation]
  evaluationCustomFields(input: EvaluationCustomFieldsInput): EvaluationCustomFields
  events(input: EventsInput!): [Event]
  event(id: ID!): Event
  experiences(input: ExperiencesInput): [Experience]
  feedbacks(input: FeedbacksInput!): [Feedback!]
  feedbacksAccess: Access
  sharedFiles(input: SharedFilesInput): [SharedFile!]
  gameLeaderboard(input: LeaderboardInput!): [GameScore!]!
  guild(input: GuildInput): Guild
  guilds: [Guild]
  hobbies: [Hobby!]!
  hobby(id: ID!): Hobby
  hobbyPosts(input: HobbyPostFilterInput): [HobbyPost!]!
  hobbyPost(id: ID!): HobbyPost
  levels: [LEVEL!]
  locations: [LOCATION!]
  matrices(input: MatricesInput): [Matrix]
  matricesAccess: Access
  matricesCustomFields(input: MatricesCustomFieldsInput): MatricesCustomFields
  matrixProposals(matrix: ID!): [MatrixProposal!]!
  notifications: [Notification!]!
  officeDays(input: OfficeDaysInput): [OfficeDay]
  officeAccess: Access
  onboardingTickets: [OnboardingTicket]
  onboardingAccess: Access
  employeeOnboardingTickets: [OnboardingTicket]
  createdByMeOnboardingTickets: [OnboardingTicket]
  post(id: ID!): Post
  postBySlug(slug: String!): Post
  posts(first: Int, after: ID, filter: PostsFilter): [Post]
  postsEditor: Access @deprecated(reason: "will be moved to employee.access.posts")
  processesAccess: Access
  process(id: ID!): Process
  processes: [Process]
  processExecutionsAccess: Access
  processExecution(id: ID!): ProcessExecution
  processExecutions(input: ProcessExecutionsInput): [ProcessExecution]
  project(id: ID!): Project
  projectByCode(code: String!): Project
  projects: [Project]
  skills(input: SkillsInput): [Skill!]
  tags: [Tag]
  vacancy(id: ID!): Vacancy
  vacancies(input: VacanciesInput): [Vacancy]
  wikiRootSections: [WikiRootSection]
  wikiPage(input: WikiPageInput): WikiPage
  wikiPagesPaths(rootPath: String): [String]
  wikiSearchText(input: WikiSearchTextInput): [FoundWikiPage]
  workspaceDesignAccess: Access
  workspaces(input: WorkspacesInput): [Workspace]
  workspace(id: ID!): Workspace
}

input RemoveWikiPageInput {
  path: String
}

input ReorderMatrixSkillsInput {
  matrixId: ID!
  skillId: ID!
  newIndex: Int
  insertingEmptySlotsIds: [String]
  removingEmptySlotsIds: [String]
}

input ReviewerInput {
  employeeEmail: String
  reviewers: [String]
}

input RotateEmployeeInput {
  execution: ID!
  process: ID!
  locations: [ID]
  employee: ID!
}

input RotateRequestInput {
  id: ID!
  candidate: ID!
  comment: String!
}

type SharedFile {
  id: ID!
  url: String!
  fileName: String!
  createdAt: String
  createdBy: Employee
  updatedBy: Employee
  updatedAt: String
  size: Float
  type: String
  skills: [Skill!]
}

input SharedFilesInput {
  skills: [ID!]
}

type Skill {
  id: ID!
  name: String!
  description: String
  experiences(input: ExperiencesInput): [Experience!]
  projects: [Project!]
  parent: Skill
  children: [Skill!]
  addedBy: Employee
  isMatrixOnly: Boolean!
}

input SkillsInput {
  id: ID
  noMatrixSkills: Boolean
}

type StartGame {
  secret: String!
}

input StartGameInput {
  game: GameType!
}

type SubordinateUsersCount {
  users: Int
  one2oneRequests: Int
}

type Tag {
  id: ID!
  name: String!
  description: String @deprecated
  posts: [Post]
}

input ToggleBookmarklikeInput {
  bookmark: ID
}

input UpdateAccessGroupInput {
  name: String
  members: [String]
}

input UpdateBookInput {
  id: ID!
  title: String
  author: String
  holder: ID
  tags: [String]
}

input UpdateBookmarkInput {
  id: ID!
  title: String!
  link: String!
  skills: [ID]
}

input UpdateCurriculumVitaeInput {
  id: ID
  summary: String
  languages: String
  employee: ID!
  vitaes: [VitaeInput!]
  certificates: [CertificateInput!]
  education: [EducationInput!]
}

input UpdateCustomFieldsInput {
  employee: ID!
  lastDiscussed: String
}

input UpdateDevelopmentPlanInput {
  id: ID!
  createdAt: String
  updatedAt: String
  lastUpdatedAt: String
  developmentRoles: DevelopmentRolesInput
  guildContribution: GuildContributionInput
  previousGoals: [DevelopmentGoalInput]
  actualGoals: [DevelopmentGoalInput]
  amountOfTime: String
  longTermGoals: String
  lookBackNegative: String
  lookBackPositive: String
  lookForward: String
  lastDiscussed: String
}

input UpdateDevrelInput {
  id: ID!
  title: String
  link: String
  resource: String
  isCompleted: Boolean
  skills: [ID!]
}

input UpdateEmployeeHobbiesInput {
  id: ID!
  hobbies: [ID!]!
}

input UpdateEmployeeInput {
  id: ID!
  manager: ID
  about: String
  agileManager: String
  lastManagerMeeting: String
  one2oneRequest: Boolean
  employeeProjects: [EmployeeProjectInput!]
  addEmployeeProjects: [ID!]
  removeEmployeeProjects: [ID!]
  email: String
  name: String
  firstName: String
  lastName: String
}

input UpdateEmployeeProjectsInput {
  id: ID!
  capacity: Int
  isExtraCapacity: Boolean
}

input UpdateEventInput {
  id: ID!
  title: String
  description: String
  link: String
  start: String
  end: String
  importance: IMPORTANCE
  isAllDay: Boolean
  isDraft: Boolean
  isOnline: Boolean
  city: String
  location: String
}

input UpdateExperienceInput {
  id: ID
  level: LEVEL
  comment: String
}

input UpdateExperiencesInput {
  skills: [ID]
  level: LEVEL
  employee: ID!
}

input UpdateGuildInput {
  azureDisplayName: String!
  displayName: String
  title: String
  description: String
  shortDescription: String
  skills: [ID]
  leaders: [String]
}

input UpdateHobbyInput {
  id: ID!
  name: String
  description: String
}

input UpdateHobbyPostInput {
  id: ID!
  title: String
  body: String
  hobbies: [ID!]
  language: LANGUAGE!
  eventDate: String
  eventLocation: String
}

input UpdateMatricesCustomFieldsInput {
  employee: ID!
  lastDiscussed: String
}

input UpdateMatrixInput {
  id: ID!
  title: String!
  description: String
}

input UpdateOfficeDaysInput {
  dateStart: String!
  location: LOCATION!
  employeeLimit: Int!
  dateEnd: String
}

input UpdateOnboardingTicketInput {
  id: ID!
  title: String
  description: String
  responsible: String
  isOptional: Boolean
  isSwissre: Boolean
}

input UpdatePostInput {
  id: ID!
  title: String
  body: String!
  isTranslated: Boolean
  language: LANGUAGE
  locations: [LOCATION]
  images: [String]
  tags: [String]
}

input UpdateProcessExecutionInput {
  id: ID!
  finishDate: String
  swissReOffboardingDate: String
  employee: String
  employeeRef: String
  employeePhone: String
  prio: Int
  locations: [ID]
  project: ID
  projectFrom: ID
  projectTo: ID
  substatus: String
}

input UpdateProcessInput {
  id: ID!
  customer: CUSTOMER
  type: PROCESS_TYPE
  isRotation: Boolean
}

input UpdateProcessStepInput {
  id: ID!
  title: String
  description: String
  type: PROCESS_STEP_TYPE
  responsibleUsers: [ID]
  sendToTeamlead: Boolean
  send24hoursNotification: Boolean
  isAgileResponsible: Boolean
  parentSteps: [ID]
  hasComment: Boolean
}

input UpdateProjectInput {
  id: ID!
  scrumMasters: [String]
  displayName: String
  description: String
}

input UpdateProjectSkillsInput {
  project: ID
  skills: [ID]
}

input UpdateScoreInput {
  game: GameType!
  value: String!
}

input UpdateSharedFileInput {
  id: ID!
  skills: [ID!]
}

input UpdateSkillInput {
  id: ID!
  name: String
  description: String
  parent: ID
  isMatrixOnly: Boolean
}

input UpdateVacancyInput {
  id: ID!
  reason: String
  locations: [LOCATION]
  position: String
  responsibilities: String
  requiredSkills: String
  additionalSkills: String
  project: ID
  employeeExperience: String
  englishLevel: String
  stack: String
  description: String
}

input UpdateWikiPageInput {
  id: ID!
  title: String
  body: String
  path: String
}

input UpdateWorkplaceInput {
  id: ID!
  coordX: Int
  coordY: Int
  number: Int
}

input UpdateWorkspaceInput {
  id: ID!
  name: String
  drawing: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input VacanciesInput {
  id: ID
}

type Vacancy {
  id: ID!
  reason: String
  locations: [LOCATION!]
  position: String
  responsibilities: String
  requiredSkills: String
  additionalSkills: String
  project: Project
  isPublished: Boolean
  isClosed: Boolean
  customer: String
  rotateEmployees: [Employee!]
  responsibleEmployees: [Employee!]
  editable: Boolean
  employeeExperience: String
  englishLevel: String
  stack: String
  description: String
}

type Vitae {
  id: ID!
  company: String
  dateStart: String
  dateEnd: String
  project: String
  position: String
  responsibilities: String
  level: String
}

input VitaeInput {
  id: ID
  company: String
  dateStart: String
  dateEnd: String
  project: String
  position: String
  responsibilities: String
  level: String
}

type WikiPage {
  id: ID!
  title: String
  body: String
  path: String!
}

input WikiPageInput {
  path: String
}

type WikiRootSection {
  id: ID!
  title: String
  description: String
  icon: String
  path: String!
}

input WikiSearchTextInput {
  path: String
  text: String!
}

type Workplace {
  id: ID!
  workspace: Workspace
  coordX: Int
  coordY: Int
  number: Int
  bookings(input: BookingsInput): [WorkplaceBooking]
}

type WorkplaceBooking {
  id: ID!
  workplace: Workplace
  employeeId: ID!
  startDate: String
  finishDate: String
}

type Workspace {
  id: ID!
  drawing: String
  workplaces: [Workplace]
  location: LOCATION
  name: String
}

input WorkspacesInput {
  location: LOCATION
}
